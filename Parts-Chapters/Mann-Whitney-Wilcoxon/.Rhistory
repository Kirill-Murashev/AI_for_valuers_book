fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
summary(fit_reduced1)
anova(fit_full, fit_reduced1)
fit_reduced2 <- lm(Fertility ~ Infant.Mortality + Education + Catholic + Agriculture, data = swiss)
summary(fit_reduced2)
anova(fit_full, fit_reduced2)
optimal_fit <-  step(fit_full, direction = 'backward')
summary(optimal_fit)
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
View(scope)
step(scope)
step(scope, direction = "forward")
step(model_full, direction = "backward", scope = list(lower = model_null, upper = model_full))
ideal_model <- step(model_full, direction = "backward", scope = list(lower = model_null, upper = model_full))
anova(ideal_modelm model_full)
anova(ideal_model, model_full)
df <- LifeCycleSavings
View(df)
model <- lm(sr ~ (.) * (.), data = df)
summary(model)
model <- lm(sr ~ ((.) * (.))^2, data = df)
summary(model)
summary(model)
model <- lm(sr ~ (((.) * (.))^2), data = df)
summary(model)
model <- lm(sr ~ ((.)^2 * (.))^2, data = df)
summary(model)
?lm
model <- lm(sr ~ (. * .)^2, data = df)
summary(model)
model <- lm(sr ~ (. + .)^2, data = df)
summary(model)
library(ggplot2)
data(swiss)
str(swiss)
# relationships between all variables
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
ggplot(swiss, aes(x = Education)) +
geom_histogram()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Education)) +
geom_histogram()
ggplot(swiss, aes(x = log(Education)) +
ggplot(swiss, aes(x = log(Education)) +
ggplot(swiss, aes(x = log(Education))) +
geom_histogram()
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
library(ggplot2)
# relationships between all variables
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
ggplot(swiss, aes(x = log(Education))) +
geom_histogram()
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
hist(my_vector)
library(dplyr)
install.packages("dplyr")
library(dplyr)
df <- data.frame(my_vector)
View(df)
df <- mutate(div = 1/my_vector)/
View(df)
View(df)
df <- mutate(df, div = 1/my_vector)
df <- mutate(df, div = 1/my_vector, log = log(my_vector), sqrt = my_vector^2)
View(df)
shapiro.test(df$my_vector)
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
hist(my_vector)
shapiro.test(df$my_vector)
shapiro.test(df[1:4])
shapiro.test(df[, 1:4])
shapiro.test(df$div)
shapiro.test(df$log)
shapiro.test(df$sqrt)
shapiro.test(df$my_vector)
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
hist(my_vector)
df <- data.frame(my_vector)
df <- mutate(df, div = 1/df$my_vector, log = log(df$my_vector), sqrt = df$my_vector^2)
shapiro.test(df$my_vector)
shapiro.test(df$div)
shapiro.test(df$log)
shapiro.test(df$sqrt)
hist(df$my_vector)
hist(df$div)
hist(df$log)
hist(df$sqrt)
shapiro.test(df$my_vector)
shapiro.test(df$div)
shapiro.test(df$log)
shapiro.test(df$sqrt)
hist(df$log)
hist(my_vector)
df <- mutate(df, div = (1/df$my_vector), log = log(df$my_vector), sqrt = df$my_vector^2)
shapiro.test(df$div)
df <- mutate(df, div = (1/df$my_vector), log = log(df$my_vector), sqrt = df$my_vector^(1/2))
shapiro.test(df$sqrt)
hist(df$sqrt)
beta.coef <- function(x){
x <- as.data.frame(scale(x))
model <- lm(x[[1]] ~ x[[2]], data = x)$coefficients
return(model)
}
beta.coef(swiss)
qnorm(p = 0.95)
qnorm(p = 0.90)
qnorm(p = 0.95)
library(tidyverse)
# Прочитать данные, первая строка --- заголовок, разделитель колонок --- запятая, десятичный разделитель --- точка
# x --- positional аргумент
# header, sep, dec --- named
almatyFlats <- read.csv('/home/kaarlahti/TresoritDrive/Methodics/My/AI_for_valuers/datasets/Almaty/almaty-apts-2019-1.csv', header = TRUE, sep = ",", dec = ".")
View(almatyFlats)
as_tibble(almatyFlats)
hist(almatyFlats$price.m)
install.packages("moments")
kHistSturgess0 <- function(x){
ks0 = (max(x)-min(x))/(1+log2(nrow(x)))
return(ks0)
}
View(kHistSturgess0)
View(kHistSturgess0)
kHistSturgess0(almatyFlats$price.m)
kHistSturgess0 <- function(x){
n   <- nrow(x)
ks0 = (max(x)-min(x))/(1+log2(n)))
return(ks0)
}
kHistSturgess0(almatyFlats$price.m)
n <- nrow(almatyFlats$price.m)
View(almatyFlats)
nrow(almatyFlats$price.m)
nrow(almatyFlats$price.m)
# Прочитать данные, первая строка --- заголовок, разделитель колонок --- запятая, десятичный разделитель --- точка
# x --- positional аргумент
# header, sep, dec --- named
almatyFlats <- read.csv('/home/kaarlahti/TresoritDrive/Methodics/My/AI_for_valuers/datasets/Almaty/almaty-apts-2019-1.csv', header = TRUE, sep = ",", dec = ".")
nrow(almatyFlats$price.m)
nrow(almatyFlats$price.m)
#Изменяем тип объекта на более удобный и современный
as_tibble(almatyFlats)
? nrow
lenght(almatyFlats$price)
#Изменяем тип объекта на более удобный и современный
as.numeric(almatyFlats$price)
#Изменяем тип объекта на более удобный и современный
as.numeric(almatyFlats$price)
as.numeric(almatyFlats$price.m)
nrow(almatyFlats$price)
NROW(almatyFlats$price)
kHistSturgess0 <- function(x){
n   <- NROW(x)
ks0 = (max(x)-min(x))/(1+log2(n)))
return(ks0)
}
kHistSturgess0(almatyFlats$price.m)
n <- NROW(almatyFlats$price.m)
n
kHistSturgess0(almatyFlats$price.m)
kHistSturgess0 <- function(x){
n   <- NROW(x)
ks0 = (max(x)-min(x))/(1+log2(n)))
return(ks0)
}
kHistSturgess0 <- function(x){
n   <- NROW(x)
ks0 = (max(x)-min(x))/(1+log2(n)))
return(ks0)
}
kHistSturgess0 <- function(x){
n   <- NROW(x)
ks0 = (max(x)-min(x))/(1+log2(n))
return(ks0)
}
kHistSturgess0(almatyFlats$price.m)
max(almatyFlats$price.m)
min(almatyFlats$price.m)
max <- max(almatyFlats$price.m)
min <- min(almatyFlats$price.m)
range <- max-min
del <- 1+log2(n)
res <- range/del
rm(del)
rm(max)
rm(min)
rm(n)
rm(range)
rm(res)
# создать функцию для первой версии формулы Стёрджесса
kHistSturgess1 <- function(x){
n   <- NROW(x)
ks1 = (1+log2(n))
return(ks1)
}
library(tidyverse)
library(moments)
library(xtable)
options("scipen"=999, "digits"=3)
# прочитать данные, первая строка --- заголовок, разделитель колонок --- запятая, десятичный разделитель --- точка
# x --- positional аргумент
# header, sep, dec --- named
almatyFlats <- read.csv('/home/kaarlahti/TresoritDrive/Methodics/My/AI_for_valuers/datasets/Almaty/almaty-apts-2019-1.csv', header = TRUE, sep = ",", dec = ".")
spbaFlats <- read.csv('/home/kaarlahti/TresoritDrive/Methodics/My/AI_for_valuers/datasets/Saint-Petersburg/flats/spba_flats_2109.csv', header = TRUE, sep = ",", dec = ".")
spbaFlats <- read.csv('/home/kaarlahti/TresoritDrive/Methodics/My/AI_for_valuers/datasets/Saint-Petersburg/flats/spba_flats_210928.csv', header = TRUE, sep = ",", dec = ".")
# изменить тип объекта на более удобный и современный
as_tibble(almatyFlats)
# создать функцию для "нулевой" версии формулы Стёрджесса
kHistSturgess0 <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                # вычислить число n
ks0 = (max(x)-min(x))/(1+log2(n))             # рассчитать k
return(c(ks0))                                # возвратить k
}                                               # конец функции
# создать функцию для первой версии формулы Стёрджесса
kHistSturgess1 <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                # вычислить число n
ks1 = (1+log2(n))                             # рассчитать k
return(ks1)                                   # возвратить k
}                                               # конец функции
# создать функцию для второй версии формулы Стёрджесса
kHistSturgess2 <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                # вычислить число n
ks2 = (1+(3.3*log10(n)))                      # рассчитать k
return(ks2)                                   # возвратить k
}                                               # конец функции
# создать функцию для формулы Брукса и Каррузера
kHistBruksKarruzer <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                    # вычислить число n
kbk = 5*log10(n)                                  # рассчитать k
return(kbk)                                       # возвратить k
}                                                   # конец функции
# создать функцию для формулы Хайнхольда и Гаеде
kHistHeinholdGaede <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                    # вычислить число n
khg = sqrt(n)                                     # рассчитать k
return(khg)                                       # возвратить k
}                                                   # конец функции
# создать функцию для формулы Манна и Вальда
kHistMannWald <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                               # вычислить число n
kmw = (4*(2^(1/5)))*((n/qnorm(0.95))^0.4)    # рассчитать k
return(kmw)                                  # возвратить k
}                                              # конец функции
# создать функцию для формулы Уильямса
kHistWilliams <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                               # вычислить число n
kwi = (2*(2^(1/5)))*((n/qnorm(0.95))^0.4)    # рассчитать k
return(kwi)                                  # возвратить k
}                                              # конец функции
# создать функцию для первой формулы Хана и Шапиро
kHistHahnShapiro <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                  # вычислить число n
khs = 4*(0.75*((n-1)^2)^0.2)                    # рассчитать k
return(khs)                                     # возвратить k
}                                                 # конец функции
# создать функцию для второй формулы Хана и Шапиро
kHistShapiroHahn <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                  # вычислить число n
ksh = 1.9*(n^0.4)                               # рассчитать k
return(ksh)                                     # возвратить k
}                                                 # конец функции
# создать функцию для формулы Кендалла и Стюарта
kHistKendallStuart <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                    # вычислить число n
b = 2                                             # задать b: 2 <= b <= 4
t1 = qnorm(0.95)                                  # задать t1
t2 = 0                                            # задать t2
kks = b*(sqrt(2)*(((n-1)/(t1+t2))^0.4))           # рассчитать k
return(kks)                                       # возвратить k
}                                                   # конец функции
# создать функцию для формулы Таушанова
kHistTaushanow <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                # вычислить число n
kta = 4*log10(n)                              # рассчитать k
return(kta)                                   # возвратить k
}                                               # конец функции
# создать функцию для формулы Тоневой
kHistTonewa <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                             # вычислить число n
kto = 5*log10(n)-5                         # рассчитать k
return(kto)                                # возвратить k
}                                            # конец функции
# создать функцию для формулы Алексеевой
kHistAlekseewa <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                # вычислить число n
kurt = kurtosis(x)                            # вычислить коэффициент эксцесса
counterkurt = 1/(sqrt(kurt))                  # вычислить коэффициент контрэксцесса
kal = (4/counterkurt)*(log10(n/10))           # рассчитать k
return(kal)                                   # возвратить k
}                                               # конец функции
# создать функцию для первой формулы Новицкого
kHistNowiczkij1 <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                 # вычислить число n
kurt = kurtosis(x)                             # вычислить коэффициент эксцесса
kn1 = ((kurt+1.5)/6)*(n^0.4)                   # рассчитать k
return(kn1)                                    # возвратить k
}                                                # конец функции
# создать функцию для второй формулы Новицкого
kHistNowiczkij2 <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                 # вычислить число n
kurt = kurtosis(x)                             # вычислить коэффициент эксцесса
kn2 = (((kurt^4)*(n^2))^(1/5))*(1/3)           # рассчитать k
return(kn2)                                    # возвратить k
}                                                # конец функции
# создать функцию для третьей формулы Новицкого
kHistNowiczkij3_min <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                     # вычислить число n
kurt = kurtosis(x)                                 # вычислить коэффициент эксцесса
kn3min = 0.55*(n^0.4)                              # рассчитать k min
return(kn3min)                                     # возвратить k min
}                                                    # конец функции
# создать функцию для третьей формулы Новицкого
kHistNowiczkij3_max <- function(x, na.omit = FALSE){ # создать функцию, игнорировать пропущенные значения
n   <- NROW(x)                                     # вычислить число n
kurt = kurtosis(x)                                 # вычислить коэффициент эксцесса
kn3max = 1.25*(n^0.4)                              # рассчитать k max
return(kn3max)                                     # возвратить k max
}                                                    # конец функции
optimalK <- function(x, na.omit = FALSE){ # создать функцию для обобщения результата
ks0 <- kHistSturgess0(x)
ks1 <- kHistSturgess1(x)
ks2 <- kHistSturgess2(x)
kbk <- kHistBruksKarruzer(x)
khg <- kHistHeinholdGaede(x)
kmw <- kHistMannWald(x)
kwi <- kHistWilliams(x)
khs <- kHistHahnShapiro(x)
ksh <- kHistShapiroHahn(x)
kks <- kHistKendallStuart(x)
kta <- kHistTaushanow(x)
kto <- kHistTonewa(x)
kal <- kHistAlekseewa(x)
kn1 <- kHistNowiczkij1(x)
kn2 <- kHistNowiczkij2(x)
kn3_min <- kHistNowiczkij3_min(x)
kn3_max <- kHistNowiczkij3_max(x)
optimal_k <- return(c(ks0, ks1, ks2, kbk, khg, kmw, kwi, khs, ksh, kks, kta, kto, kal, kn1, kn2, kn3_min, kn3_max))
return(k)
}
kOptimalAlmaty <- optimalK(almatyFlats$price.m)
function_name<- c("Sturgess0", "Sturgess1", "Sturgess2", "BruksKarruzer", "HeinholdGaede", "MannWald", "Williams", "HahnShapiro", "ShapiroHahn", "KendallStuart", "Taushanow", "Tonewa", "Alekseewa", "Nowiczkij1", "Nowiczkij2", "Nowiczkij3_min", "Nowiczkij3_max")
kOptimalAlmaty <- tibble(function_name, kOptimalAlmaty)
xtable(kOptimalAlmaty,caption = "оптимальное число k, полученное различными методами", auto = TRUE)
hist(almatyFlats$price.m, breaks = 12, freq = FALSE, xlab = "Цена предложения, казахстанские рубли", ylab = "Плотность вероятности", main = "Гистограмма удельных цен предложений на квартиры, выставленные на вторичном рынке города Алматы (лето 2019)")
kOptimalSpba <- optimalK(spbaFlats$price_m)
function_name<- c("Sturgess0", "Sturgess1", "Sturgess2", "BruksKarruzer", "HeinholdGaede", "MannWald", "Williams", "HahnShapiro", "ShapiroHahn", "KendallStuart", "Taushanow", "Tonewa", "Alekseewa", "Nowiczkij1", "Nowiczkij2", "Nowiczkij3_min", "Nowiczkij3_max")
kOptimalSpba <- tibble(function_name, kOptimalSpba)
xtable(kOptimalSpba,caption = "оптимальное число k, полученное различными методами", auto = TRUE)
hist(spbaFlats$price_m, breaks = 98, freq = FALSE, xlab = "Цена предложения, российские рубли", ylab = "Плотность вероятности", main = "Гистограмма удельных цен предложений на квартиры, выставленные на вторичном рынке Санкт-Петербургской городской агломерации (2021-09-28)")
rm(kOptimalAlmaty)
rm(kOptimalSpba)
rm(spbaFlats)
dim(almatyFlats)
ln(0)
log(0)
log(-5)
log(1)
log(2)
log(3)
log(5)
log(8)
log(13)
log(21)
# activate libraries
library(tidyverse)
library(ggplot2)
# activate libraries
library(tidyverse)
library(ggplot2)
library(gamlss)
library(moments)
library(ggplot2)
library(gamlss)
# activate libraries
library(tidyverse)
# set constants
options('scipen'=1, 'digits'=3)
set.seed(19190709)
# set work catalog
setwd('/home/kaarlahti/TresoritDrive/Methodics/My/AI_for_valuers/Book/AI_for_valuers_book/Parts-Chapters/Mann-Whitney-Wilcoxon/')
# create data set from file, create subset with needed variables,
# change the type of object to a more convenient and modern one
almatyFlats <- read.csv('almaty-apts-2019-1.csv',
header = TRUE, sep = ',',
dec = '.')
myvars <- c('price.m', 'furniture')
almatyFlats <- almatyFlats[myvars]
as_tibble(almatyFlats)
# calculation of the total number of observations,
# as well as depending on the equipment
n.total <- nrow(almatyFlats)
n.non.equip <- NROW(almatyFlats$furniture[ which(almatyFlats$furniture == 0)])
n.equip <- NROW(almatyFlats$furniture[ which(almatyFlats$furniture > 0)])
# create function for second Nowiczkij formula
kHistNowiczkij2 <- function(x, na.omit = FALSE){ # create function, ignore missed values
n   <- NROW(x)                                 # calculate n
kurt = kurtosis(x)                             # calculate kurtosis
kn2 = round((((kurt^4)*(n^2))^(1/5))*(1/3))    # calculate k
return(kn2)                                    # return k
}                                                # end of function
# calculation numbers of k for different types of observations
k.all.data <- kHistNowiczkij2(almatyFlats$price.m)
k.non.equip <- kHistNowiczkij2(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
k.equip <-kHistNowiczkij2(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
# plot the histogram, combined with the density curve of the theoretical
# normal distribution for all observations
histDist(almatyFlats$price.m,
density = TRUE,
nbins = kHistNowiczkij2(almatyFlats$price.m),
xlab = 'price per meter, kaz tenge',
ylab = 'probability',
main = 'Price per meter histogram, all observations')
# set constants
options('scipen'=2, 'digits'=3)
# plot the histogram, combined with the density curve of the theoretical
# normal distribution for all observations
histDist(almatyFlats$price.m,
density = TRUE,
nbins = kHistNowiczkij2(almatyFlats$price.m),
xlab = 'price per meter, kaz tenge',
ylab = 'probability',
main = 'Price per meter histogram, all observations')
# plot the histogram, combined with the density curve of the theoretical
# normal distribution for observations without equipment
histDist(almatyFlats$price.m[ which(almatyFlats$furniture == 0)],
density = TRUE,
nbins = kHistNowiczkij2(almatyFlats$price.m[ which(almatyFlats$furniture == 0)]),
xlab = 'price per meter, kaz tenge',
ylab = 'probability',
main = 'Price per meter histogram, observations witout equipment')
# plot the histogram, combined with the density curve of the theoretical
# normal distribution for observations with equipment
histDist(almatyFlats$price.m[ which(almatyFlats$furniture > 0)],
density = TRUE,
nbins = kHistNowiczkij2(almatyFlats$price.m[ which(almatyFlats$furniture > 0)]),
xlab = 'price per meter, kaz tenge',
ylab = 'probability',
main = 'Price per meter histogram, observations witout equipment')
# summary
summary(almatyFlats$price.m)
summary(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
summary(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
boxplot(almatyFlats$price.m)
boxplot(almatyFlats$price.m ~ almatyFlats$furniture)
boxplot(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
boxplot(almatyFlats$price.m[ which(almatyFlats$furniture>1)], add = TRUE)
boxplot(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
boxplot(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
nequiped <- subset(almatyFlats, furniture == 0)
equiped <- subset(almatyFlats, furniture > 0)
boxplot(nequiped$price.m, equiped$price.m,
ylab = 'price per meter')
boxplot(nequiped$price.m, equiped$price.m,
ylab = 'price per meter',
names =c('not equiped', 'equiped'))
boxplot(almatyFlats$price.m[ which(almatyFlats$furniture == 0)], almatyFlats$price.m[ which(almatyFlats$furniture > 0)]),
ylab = 'price per meter',
names =c('not equiped', 'equiped'))
boxplot(nequiped$price.m, equiped$price.m,
ylab = 'price per meter',
names =c('not equiped', 'equiped'))
rm(nequiped)
rm(equiped)
install.packages("normtest")
install.packages("nortest")
# normality tests for no equiped observations
shapiro.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
library(normtest)
library(nortest)
sf.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
ad.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
ajb.norm.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
lillie.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
# normality tests for equipped observations
# Shapiro-Wilk test for normality
shapiro.test(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
# Shapiro-Francia test for normality
sf.test(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
# Anderson-Darling test for normality
ad.test(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
# Adjusted Jarque-Bera test for normality
ajb.norm.test(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
# Lilliefors (Kolmogorov-Smirnov) test for normality
lillie.test(almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
wilcox.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)], almatyFlats$price.m[ which(almatyFlats$furniture > 0)]), altenative = c('two.sided')
wilcox.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)], almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
wilcox.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)],
almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
# perform Mann-Whitney U-test
wilcox.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)],
almatyFlats$price.m[ which(almatyFlats$furniture == 0)])
# perform Mann-Whitney U-test
wilcox.test(almatyFlats$price.m[ which(almatyFlats$furniture == 0)],
almatyFlats$price.m[ which(almatyFlats$furniture > 0)])
